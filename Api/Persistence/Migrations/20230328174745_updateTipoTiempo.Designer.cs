// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.EntityFramework;

namespace Persistence.Migrations
{
    [DbContext(typeof(TimeOrganizatorDBContext))]
    [Migration("20230328174745_updateTipoTiempo")]
    partial class updateTipoTiempo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entidades.AsignacionProyectoPorDia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AsignacionTipoProyectoPorDiaId")
                        .HasColumnType("int");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int");

                    b.Property<float>("PorcentajePorDia")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AsignacionTipoProyectoPorDiaId");

                    b.HasIndex("EstadoId");

                    b.ToTable("AsignacionesProyectoPorDia");
                });

            modelBuilder.Entity("Domain.Entidades.AsignacionTipoProyectoPorDia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiasSemanaId")
                        .HasColumnType("int");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int");

                    b.Property<float>("PorcentajePorDia")
                        .HasColumnType("real");

                    b.Property<int>("TipoProyectoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiasSemanaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("TipoProyectoId");

                    b.ToTable("AsignacionesTipoProyectoPorDia");
                });

            modelBuilder.Entity("Domain.Entidades.DiaSemana", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("HorasConfiguradas")
                        .HasColumnType("real");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique()
                        .HasFilter("[Nombre] IS NOT NULL");

                    b.ToTable("DiasSemana");
                });

            modelBuilder.Entity("Domain.Entidades.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoEstadoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoEstadoId");

                    b.ToTable("Estados");
                });

            modelBuilder.Entity("Domain.Entidades.Parametros", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Valor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Parametros");
                });

            modelBuilder.Entity("Domain.Entidades.PlanActividad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DuracionMinutos")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaEstimadaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrdenEjecucion")
                        .HasColumnType("int");

                    b.Property<int>("ProyectoId")
                        .HasColumnType("int");

                    b.Property<int>("TipoActividadId")
                        .HasColumnType("int");

                    b.Property<int?>("TipoActividadId1")
                        .HasColumnType("int");

                    b.Property<int>("TipoTiempoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProyectoId");

                    b.HasIndex("TipoActividadId");

                    b.HasIndex("TipoActividadId1");

                    b.HasIndex("TipoTiempoId");

                    b.ToTable("PlanesActividad");
                });

            modelBuilder.Entity("Domain.Entidades.Proyecto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AsignacionProyectoPorDiaId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DuracionMinutos")
                        .HasColumnType("int");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaFinalEstimada")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoProyectoId")
                        .HasColumnType("int");

                    b.Property<int?>("TipoProyectoId1")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AsignacionProyectoPorDiaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("TipoProyectoId");

                    b.HasIndex("TipoProyectoId1");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Proyectos");
                });

            modelBuilder.Entity("Domain.Entidades.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Domain.Entidades.TiempoReal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Duracion")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlanActividadId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlanActividadId");

                    b.ToTable("TiemposReales");
                });

            modelBuilder.Entity("Domain.Entidades.TipoActividad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoProyectoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.HasIndex("TipoProyectoId");

                    b.ToTable("TiposActividades");
                });

            modelBuilder.Entity("Domain.Entidades.TipoEstado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TiposEstados");
                });

            modelBuilder.Entity("Domain.Entidades.TipoProyecto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("UsuarioId1");

                    b.ToTable("TiposProyecto");
                });

            modelBuilder.Entity("Domain.Entidades.TipoTiempo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoProyectoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoProyectoId");

                    b.ToTable("TiposTiempo");
                });

            modelBuilder.Entity("Domain.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreUsuario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PrimerApellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimerNombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<string>("SegundoApellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SegundoNombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.HasIndex("NombreUsuario")
                        .IsUnique()
                        .HasFilter("[NombreUsuario] IS NOT NULL");

                    b.HasIndex("RolId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Domain.Entidades.AsignacionProyectoPorDia", b =>
                {
                    b.HasOne("Domain.Entidades.AsignacionTipoProyectoPorDia", "AsignacionTipoProyectoPorDia")
                        .WithMany("AsignacionesProyectosPorDia")
                        .HasForeignKey("AsignacionTipoProyectoPorDiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entidades.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AsignacionTipoProyectoPorDia");

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("Domain.Entidades.AsignacionTipoProyectoPorDia", b =>
                {
                    b.HasOne("Domain.Entidades.DiaSemana", "DiasSemana")
                        .WithMany("AsignacionTipoProyectoPorDias")
                        .HasForeignKey("DiasSemanaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entidades.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entidades.TipoProyecto", "TipoProyecto")
                        .WithMany("AsignacionesTipoProyectoPorDia")
                        .HasForeignKey("TipoProyectoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiasSemana");

                    b.Navigation("Estado");

                    b.Navigation("TipoProyecto");
                });

            modelBuilder.Entity("Domain.Entidades.Estado", b =>
                {
                    b.HasOne("Domain.Entidades.TipoEstado", "TipoEstado")
                        .WithMany("Estados")
                        .HasForeignKey("TipoEstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoEstado");
                });

            modelBuilder.Entity("Domain.Entidades.PlanActividad", b =>
                {
                    b.HasOne("Domain.Entidades.Proyecto", "Proyecto")
                        .WithMany("PlanActividades")
                        .HasForeignKey("ProyectoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entidades.TipoActividad", "TipoActividad")
                        .WithMany()
                        .HasForeignKey("TipoActividadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entidades.TipoActividad", null)
                        .WithMany("PlanActividades")
                        .HasForeignKey("TipoActividadId1");

                    b.HasOne("Domain.Entidades.TipoTiempo", "TipoTiempo")
                        .WithMany("PlanActividades")
                        .HasForeignKey("TipoTiempoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proyecto");

                    b.Navigation("TipoActividad");

                    b.Navigation("TipoTiempo");
                });

            modelBuilder.Entity("Domain.Entidades.Proyecto", b =>
                {
                    b.HasOne("Domain.Entidades.AsignacionProyectoPorDia", "AsignacionProyectoPorDia")
                        .WithMany("Proyectos")
                        .HasForeignKey("AsignacionProyectoPorDiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entidades.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entidades.TipoProyecto", "TipoProyecto")
                        .WithMany()
                        .HasForeignKey("TipoProyectoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entidades.TipoProyecto", null)
                        .WithMany("Proyectos")
                        .HasForeignKey("TipoProyectoId1");

                    b.HasOne("Domain.Entidades.Usuario", null)
                        .WithMany("Proyectos")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("AsignacionProyectoPorDia");

                    b.Navigation("Estado");

                    b.Navigation("TipoProyecto");
                });

            modelBuilder.Entity("Domain.Entidades.TiempoReal", b =>
                {
                    b.HasOne("Domain.Entidades.PlanActividad", "PlanActividad")
                        .WithMany("TiemposReales")
                        .HasForeignKey("PlanActividadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlanActividad");
                });

            modelBuilder.Entity("Domain.Entidades.TipoActividad", b =>
                {
                    b.HasOne("Domain.Entidades.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entidades.TipoProyecto", "TipoProyecto")
                        .WithMany("TiposActividades")
                        .HasForeignKey("TipoProyectoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estado");

                    b.Navigation("TipoProyecto");
                });

            modelBuilder.Entity("Domain.Entidades.TipoProyecto", b =>
                {
                    b.HasOne("Domain.Entidades.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entidades.Usuario", null)
                        .WithMany("TiposProyecto")
                        .HasForeignKey("UsuarioId1");

                    b.Navigation("Estado");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Entidades.TipoTiempo", b =>
                {
                    b.HasOne("Domain.Entidades.TipoProyecto", "TipoProyecto")
                        .WithMany("TiposTiempo")
                        .HasForeignKey("TipoProyectoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TipoProyecto");
                });

            modelBuilder.Entity("Domain.Entidades.Usuario", b =>
                {
                    b.HasOne("Domain.Entidades.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entidades.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estado");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Domain.Entidades.AsignacionProyectoPorDia", b =>
                {
                    b.Navigation("Proyectos");
                });

            modelBuilder.Entity("Domain.Entidades.AsignacionTipoProyectoPorDia", b =>
                {
                    b.Navigation("AsignacionesProyectosPorDia");
                });

            modelBuilder.Entity("Domain.Entidades.DiaSemana", b =>
                {
                    b.Navigation("AsignacionTipoProyectoPorDias");
                });

            modelBuilder.Entity("Domain.Entidades.PlanActividad", b =>
                {
                    b.Navigation("TiemposReales");
                });

            modelBuilder.Entity("Domain.Entidades.Proyecto", b =>
                {
                    b.Navigation("PlanActividades");
                });

            modelBuilder.Entity("Domain.Entidades.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Domain.Entidades.TipoActividad", b =>
                {
                    b.Navigation("PlanActividades");
                });

            modelBuilder.Entity("Domain.Entidades.TipoEstado", b =>
                {
                    b.Navigation("Estados");
                });

            modelBuilder.Entity("Domain.Entidades.TipoProyecto", b =>
                {
                    b.Navigation("AsignacionesTipoProyectoPorDia");

                    b.Navigation("Proyectos");

                    b.Navigation("TiposActividades");

                    b.Navigation("TiposTiempo");
                });

            modelBuilder.Entity("Domain.Entidades.TipoTiempo", b =>
                {
                    b.Navigation("PlanActividades");
                });

            modelBuilder.Entity("Domain.Entidades.Usuario", b =>
                {
                    b.Navigation("Proyectos");

                    b.Navigation("TiposProyecto");
                });
#pragma warning restore 612, 618
        }
    }
}
